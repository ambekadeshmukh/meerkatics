# meerkatics/infrastructure/docker-compose.yml

version: '3.8'

services:
  # SQLite database files will be stored in named volumes
  # No separate container needed

  # Message queue
  kafka:
    image: bitnami/kafka:latest
    container_name: meerkatics-kafka
    restart: always
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - meerkatics-kafka-data:/bitnami/kafka

  # Data processing
  processor:
    build:
      context: ../backend/stream-processor
      dockerfile: Dockerfile
    container_name: meerkatics-processor
    restart: always
    depends_on:
      kafka:
        condition: service_started
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SQLITE_DB_PATH=/data/meerkatics.db
    volumes:
      - ../backend/stream-processor:/app
      - meerkatics-log-data:/var/log/meerkatics

  # API server
  api:
    build:
      context: ../backend/api-server
      dockerfile: Dockerfile
    container_name: meerkatics-api
    restart: always
    environment:
      - SQLITE_DB_PATH=/data/meerkatics.db
      - ENABLE_PROMETHEUS=true
      - API_PORT=${API_PORT:-8000}
      - JWT_SECRET=${JWT_SECRET:-default_secret_change_me_in_production}
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - ../backend/api-server:/app
      - meerkatics-log-data:/var/log/meerkatics
      - meerkatics-sqlite-data:/data

  # Metrics & monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: meerkatics-prometheus
    restart: always
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus:/etc/prometheus
      - meerkatics-prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: meerkatics-frontend
    restart: always
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      - api
    environment:
      - REACT_APP_API_URL=${API_URL:-http://localhost:8000}

# Named volumes for persistence
volumes:
  meerkatics-kafka-data:
    driver: local
  meerkatics-prometheus-data:
    driver: local
  meerkatics-log-data:
    driver: local
  meerkatics-sqlite-data:
    driver: local