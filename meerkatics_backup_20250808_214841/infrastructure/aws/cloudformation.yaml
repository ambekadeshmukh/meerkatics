# meerkatics/infrastructure/aws/cloudformation.yaml

AWSTemplateFormatVersion: '2010-09-09'
Description: 'Meerkatics - LLM Observability Platform - EC2 Deployment'

Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - m5.large
      - m5.xlarge
    ConstraintDescription: must be a valid EC2 instance type.

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  SSHLocation:
    Description: The IP address range that can SSH to the EC2 instance
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  AccessLocation:
    Description: The IP address range that can access the Meerkatics services
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  DBPassword:
    Description: Database password
    Type: String
    NoEcho: true
    MinLength: 8
    MaxLength: 41
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.

  JWTSecret:
    Description: JWT secret for API authentication
    Type: String
    NoEcho: true
    MinLength: 16
    ConstraintDescription: must be at least 16 characters.

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MeerkaticsVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MeerkaticsIGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: MeerkaticsPublicSubnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: MeerkaticsPublicRouteTable

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Meerkatics EC2 instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref AccessLocation
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref AccessLocation
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: !Ref AccessLocation
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: !Ref AccessLocation
        - IpProtocol: tcp
          FromPort: 9090
          ToPort: 9090
          CidrIp: !Ref AccessLocation

  EC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: InternetGatewayAttachment
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !GetAtt SecurityGroup.GroupId
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnet
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 30
            VolumeType: gp3
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Update system
          yum update -y
          yum install -y docker git aws-cli jq
          
          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          
          # Start Docker service
          systemctl enable docker
          systemctl start docker
          
          # Add ec2-user to docker group
          usermod -a -G docker ec2-user
          
          # Clone Meerkatics repository
          cd /home/ec2-user
          git clone https://github.com/your-username/meerkatics.git
          chown -R ec2-user:ec2-user meerkatics
          
          # Create .env file
          cat > /home/ec2-user/meerkatics/infrastructure/.env << EOF
          # Database settings
          POSTGRES_USER=meerkaticsuser
          POSTGRES_PASSWORD=${DBPassword}
          POSTGRES_DB=meerkatics
          POSTGRES_PORT=5432
          
          # API settings
          API_PORT=8000
          JWT_SECRET=${JWTSecret}
          
          # Frontend settings
          FRONTEND_PORT=80
          API_URL=http://localhost:8000
          
          # Prometheus settings
          PROMETHEUS_PORT=9090
          EOF
          
          # Start services
          cd /home/ec2-user/meerkatics/infrastructure
          docker-compose up -d
          
          # Configure CloudWatch for logs
          yum install -y amazon-cloudwatch-agent
          
          cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << EOF
          {
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/meerkatics/*.log",
                      "log_group_name": "Meerkatics",
                      "log_stream_name": "{instance_id}/meerkatics",
                      "retention_in_days": 7
                    }
                  ]
                }
              }
            }
          }
          EOF
          
          # Start CloudWatch agent
          systemctl enable amazon-cloudwatch-agent
          systemctl start amazon-cloudwatch-agent
          
          # Ensure proper permissions
          chown -R ec2-user:ec2-user /home/ec2-user/meerkatics
          
      Tags:
        - Key: Name
          Value: Meerkatics

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0cff7528ff583bf9a
    us-east-2:
      AMI: ami-0721c9af7b9b75114
    us-west-1:
      AMI: ami-0d9858aa3c6322f73
    us-west-2:
      AMI: ami-098e42ae54c764c35
    eu-west-1:
      AMI: ami-096800910c1b781ba
    eu-central-1:
      AMI: ami-06ce824c157700cd2
    ap-northeast-1:
      AMI: ami-00b0c009e1f7961f0
    ap-northeast-2:
      AMI: ami-00b0c009e1f7961f0
    ap-southeast-1:
      AMI: ami-00b0c009e1f7961f0
    ap-southeast-2:
      AMI: ami-00b0c009e1f7961f0

Outputs:
  InstancePublicIP:
    Description: Public IP address of the Meerkatics instance
    Value: !GetAtt EC2Instance.PublicIp

  WebsiteURL:
    Description: URL for Meerkatics dashboard
    Value: !Sub http://${EC2Instance.PublicDnsName}

  APIURL:
    Description: URL for Meerkatics API
    Value: !Sub http://${EC2Instance.PublicDnsName}:8000

  PrometheusURL:
    Description: URL for Prometheus dashboard
    Value: !Sub http://${EC2Instance.PublicDnsName}:9090

  SSHCommand:
    Description: SSH command to connect to the instance
    Value: !Sub ssh -i ${KeyName}.pem ec2-user@${EC2Instance.PublicDnsName}